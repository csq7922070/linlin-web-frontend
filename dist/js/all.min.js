// var basePath = "http://mifan.4zlink.com:8080/mifan";
var basePath = "http://localhost:8080/skh";
// var basePath = "http://192.168.0.117:8080/skh";

var skhControllers = angular.module('skhControllers', ['ui.router','services.repairs','services.curd','resources.repairs']);
var myApp = angular.module('myApp', ['ui.router', 'angular-carousel', 'skhControllers']);

myApp.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {

    $urlRouterProvider.otherwise("/home");

    $stateProvider
        .state('notice', {
            url: "/notice-list",
            templateUrl: "tpl/notice/notice-list.tpl.html",
            controller: 'noticeListCtrl'
        })
        .state('notice-detail', {
            url: "/notice/:id",
            templateUrl: "tpl/notice/notice-detail.tpl.html",
            controller: "noticeDetailCtrl"
        })
        .state('repair', {
            url: "/repair-list",
            templateUrl: "tpl/repair/repair-list.tpl.html",
            controller: 'repairListCtrl'
        })
        .state('repair-detail', {
            url: "/repair/:id",
            templateUrl: "tpl/repair/repair-detail.tpl.html",
            controller: 'repairDetailCtrl'
        })
        .state('repair-add', {
            url: "/repair-add",
            templateUrl: "tpl/repair/repair-add.tpl.html",
            controller: 'repairAddCtrl'
        })
        .state('complain', {
            url: "/complain-list",
            templateUrl: "tpl/complain/complain-list.tpl.html",
            controller: "complainListCtrl"
        })
        .state('complain-detail', {
            url: "/complain/:id",
            templateUrl: "tpl/complain/complain-detail.tpl.html",
            controller: "complainDetailCtrl"
        })
        .state('complain-add', {
            url: "/complain-add",
            templateUrl: "tpl/complain/complain-add.tpl.html",
            controller: "complainAddCtrl"
        })
        .state('address-edit', {
            url: "/address-edit",
            templateUrl: "tpl/address/address-edit.tpl.html"
        })
        .state('address-block', {
            url: "/address-block/",
            templateUrl: "tpl/address/block/block.tpl.html",
            controller: "addressBlockCtrl"
        })
        .state('address-unit', {
            url: "/address-unit/:block",
            templateUrl: "tpl/address/unit/unit.tpl.html",
            controller: "addressUnitCtrl"
        })
        .state('address-room', {
            url: "/address-room/:block/:unit",
            templateUrl: "tpl/address/room/room.tpl.html",
            controller: "addressRoomCtrl"
        })
        .state('address', {
            url: "/address/:id/:block/:unit/:room/:username/:initial",
            templateUrl: "tpl/address/address-edit.tpl.html",
            controller: "addressCtrl"
        })
        .state('address-list', {
            url: "/address-list",
            templateUrl: "tpl/address/address-list.tpl.html",
            controller: "addressListCtrl"
        })
        .state('bill', {
            url: "/bill/:block/:unit/:room/:id/:username",
            templateUrl: "tpl/payment/bill.tpl.html",
            controller: "billCtrl"
        })
        .state('payment', {
            url: "/payment",
            templateUrl: "tpl/payment/payment.tpl.html",
            controller: "paymentCtrl"
        })
        .state('payment-list', {
            url: "/payment-list/:id",
            templateUrl: "tpl/payment/payment-list.tpl.html",
            controller: "paymentListCtrl"
        })
        .state('home', {
            url: "/home",
            templateUrl: "tpl/home/home.tpl.html",
            controller: "homeCtrl"
        })
        .state('home.shop-info', {
            url: "/shop-info/:site",
            templateUrl: "tpl/shop/shop-info.tpl.html",
            controller: "shopInfoCtrl"
        })
        .state('html-error', {
            url: "/html-error",
            templateUrl: "tpl/home/html-error.tpl.html"
        });
}]).config(['$httpProvider', function ($httpProvider) {
    $httpProvider.defaults.headers.put['Content-Type'] = 'application/x-www-form-urlencoded';
    $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';

    // Override $http service's default transformRequest
    $httpProvider.defaults.transformRequest = [function (data) {
        /**
         * The workhorse; converts an object to x-www-form-urlencoded serialization.
         * @param {Object} obj
         * @return {String}
         */
        var param = function (obj) {
            var query = '';
            var name, value, fullSubName, subName, subValue, innerObj, i;

            for (name in obj) {
                value = obj[name];

                if (value instanceof Array) {
                    for (i = 0; i < value.length; ++i) {
                        subValue = value[i];
                        fullSubName = name + '[' + i + ']';
                        innerObj = {};
                        innerObj[fullSubName] = subValue;
                        query += param(innerObj) + '&';
                    }
                } else if (value instanceof Object) {
                    for (subName in value) {
                        subValue = value[subName];
                        fullSubName = name + '[' + subName + ']';
                        innerObj = {};
                        innerObj[fullSubName] = subValue;
                        query += param(innerObj) + '&';
                    }
                } else if (value !== undefined && value !== null) {
                    query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';
                }
            }

            return query.length ? query.substr(0, query.length - 1) : query;
        };

        return angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;
    }];
}]).run(['$rootScope', function ($rootScope) {
    $rootScope.$on('$stateChangeSuccess', function (event, to, toParams, from, fromParams) {
        $rootScope.previousState = from.name;
        $rootScope.currentState = to.name;
        //console.log('Previous state:' + $rootScope.previousState);
        //console.log('Current state:' + $rootScope.currentState);
        _hmt.push(['_trackPageview', to.name]);
    });
}]);

myApp.directive('errSrc', function() {
  return {
    link: function(scope, element, attrs) {
      element.bind('error', function() {
        if (attrs.src != attrs.errSrc) {
          attrs.$set('src', attrs.errSrc);
        }
      });
    }
  }
});
myApp.directive('whenScrolled', ['$document', function ($document) {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            var raw = element[0];
            $document.bind('scroll', function () {
                var rectObject = raw.getBoundingClientRect();
                if (window.innerHeight >= rectObject.bottom) {
                    scope.$apply(attrs.whenScrolled);
                }
            });
        }
    };
}]);
angular.module('services.curd', []).
service("curd", [function() {
    this.query = function(resource, params) {
        return resource.query(params);
    }

    this.get = function(resource, params) {
        return resource.get(params);
    }

    this.save = function(resource, params) {
        return resource.save(params);
    }
}]);
angular.module('services.repairs', ['services.curd', 'resources.repairs']).
service("repairStateful", ['curd', 'repair', function(curd, repair) {
    this.data = {};
    this.query = function(params) {
        curd.query(repair, params).$promise.then(function(data) {
            this.data = data;
        }, function(data) {
            console.log("err!");
        })
    }
}]);

skhControllers.service(function(){
	console.log("sample service");
});
angular.module('resources.repairs', ['ngResource']).
factory('repairs', ['$resource', function($resource) {
    return $resource(basePath+'/repairs/:id', {id:'@id'}, {
        query: {
            method: 'GET',
            isArray: false
        }
    })
}]);
//自定义过滤器 截取字符串长度
skhControllers.filter('cut', function() {
    return function(value, wordwise, max, tail) {
        if (!value) return '';

        max = parseInt(max, 10);
        if (!max) return value;
        if (value.length <= max) return value;

        value = value.substr(0, max);
        if (wordwise) {
            var lastspace = value.lastIndexOf(' ');
            if (lastspace != -1) {
                value = value.substr(0, lastspace);
            }
        }
        return value + (tail || '...');
    };
});
skhControllers.controller('addressListCtrl', ['$scope', '$http', '$stateParams', '$rootScope', '$state',
        function($scope, $http, $stateParams, $rootScope, $state) {
            //获取业主地址信息
            $http({
                method: "GET",
                url: basePath + "/archives/findHouseByOpenid",
                params: {
                    openid: sessionStorage.getItem("openid")
                }
            }).success(function(data) {
                if (data != "") {
                    $scope.houses = data.items;
                    data.items.forEach(function(house) {
                        if (house.active == 0) {
                            $scope.activeId = house.id;
                        }

                        house.deleteAddress = function(a) {
                            //console.log("click")
                            $scope.sure_delete = true;
                            $scope.sure = function() {
                                $scope.sure_delete = false;
                                $http({
                                    method: "POST",
                                    url: basePath + "/archives/delHouse",
                                    data: {
                                        id: house.id
                                    }
                                }).success(function(data) {
                                    $scope.houses.splice(a, 1);
                                    console.log("删除成功")
                                }).error(function(data) {
                                    console.log("删除失败")
                                });
                            }
                            $scope.cancel = function() {
                                $scope.sure_delete = false;
                            }
                        };
                        house.change_flag = function() {
                            if (house.active == 0) {
                                return;
                            }
                            $http({
                                method: "POST",
                                url: basePath + "/archives/updateHouseActive",
                                data: {
                                    id: house.id,
                                    openid: sessionStorage.getItem("openid")
                                }
                            }).success(function(data) {
                                $scope.activeId = house.id;
                                console.log("设置默认地址成功");
                            }).error(function(data) {
                                console.log("设置默认地址失败");
                            });
                        }
                    })
                }

            }).error(function(data) {});
        }
    ]);
skhControllers.controller('addressCtrl', ['$scope', '$http', '$stateParams', '$rootScope',
        function($scope, $http, $stateParams, $rootScope) {
            //添加地址
            $scope.add_newaddress = function() {

                //1.8向后台添加地址
                $http({
                    method: "POST",
                    url: basePath + "/archives/addHouse",
                    data: {
                        court: "阿尔卡迪亚",
                        block: $stateParams.block,
                        unit: $stateParams.unit,
                        roomNo: $stateParams.room,
                        openid: sessionStorage.getItem("openid"),
                        id: $stateParams.id,
                        initial: $stateParams.initial
                    }
                }).success(function(data) {
                    console.log("后台添加地址成功");
                }).error(function(data) {
                    console.log("后台添加地址成功");
                })
            }
            console.log("block" + $stateParams.block + " unit" + $stateParams.unit + " room" + $stateParams.room);
            console.log("succees");
            $scope.block = $stateParams.block;
            $scope.unit = $stateParams.unit;
            $scope.room = $stateParams.room;
            //添加业主姓名与id
            $scope.username = $stateParams.username;
            $scope.id = $stateParams.id;
            console.log("username:" + $scope.username + " id:" + $scope.id)
            console.log($stateParams.initial);
        }
    ]);
skhControllers.controller('complainAddCtrl', ['$scope', '$http', '$timeout', '$state',
    function($scope, $http, $timeout, $state) {
        $scope.suc_show = false;
        $scope.err_show = false;
        $scope.mask_close=function(){
            $scope.suc_show = false;
        }
        $scope.mask_err_close=function(){
            $scope.err_show = false;
        }
        $scope.submitForm = function() {
            $http({
                method: "POST",
                url: basePath + "/complain/add.do",
                data: {
                    title: $scope.title,
                    mobile: $scope.mobile,
                    content: $scope.content,
                    openid: sessionStorage.getItem("openid")
                }
            }).success(function(data) {
                $scope.suc_show = true;
                $timeout(function() {
                    $scope.suc_show = false;
                    $state.go("complain");
                }, 3000)
            }).error(function(data) {
                $scope.err_show = true;
                $timeout(function() {
                    $scope.err_show = false;
                }, 3000)
            })
        }

    }
]);
skhControllers.controller('complainDetailCtrl', ['$scope', '$http', '$stateParams',
        function($scope, $http, $stateParams) {
            $http({
                method: "GET",
                url: basePath + "/complain/get.do",
                params: {
                    id: $stateParams.id
                }
            }).success(function(data) {
                $scope.complain = data;
            });
        }
    ]);
skhControllers.controller('complainListCtrl', ['$scope', '$http',
        function($scope, $http) {
            $scope.currentPage = 0;
            $scope.pageSize = 10;
            $scope.load = function(goPage, limit) {
                if (goPage > $scope.numberOfPages || $scope.currentPage == goPage || goPage < 1 || $scope.busy) {
                    return;
                } else {
                    $scope.busy = true;
                    $http({
                        method: "GET",
                        url: basePath + '/complain/getByOpenid',
                        params: {
                            offset: $scope.pageSize * (goPage - 1),
                            limit: $scope.pageSize,
                            openid: sessionStorage.getItem("openid")
                        }
                    }).success(function(data) {
                        $scope.numberOfPages = Math.ceil(data.count / $scope.pageSize);
                        $scope.currentPage = goPage;
                        $scope.busy = false;
                        $scope.complains = data.items;
                    });
                }
            }
            $scope.load(1, $scope.pageSize);
        }
    ]);
skhControllers.controller('homeCtrl', ['$scope', '$http', '$stateParams', '$rootScope', '$state', '$location',
        function($scope, $http, $stateParams, $rootScope, $state, $location) {

            var url = $location.url().substring($location.url().indexOf("?"));
            if (url.indexOf("home") != -1) {
                url = "";
            }
            //1.6获取微信用户openid
            if(sessionStorage.getItem("openid")==null){
                $http({
                    method: "GET",
                    url: basePath + '/getopenid' + url
                }).success(function(data) {
                    sessionStorage.setItem("openid", data.openid);

                    console.log("获取openid成功");
                }).error(function(data) {
                    console.log("获取openid失败");
                });
            }

            $scope.slides7 = [{
                id: 10,
                label: "slide #1",
                img: "images/banner_01.png"
            }, {
                id: 11,
                label: "slide #2",
                img: "images/banner_02.png"
            }, {
                id: 12,
                label: "slide #3",
                img: "images/banner_03.png"
            }];
            $scope.carouselIndex7 = 0;

            $rootScope.site = 1;
            $state.go("home.shop-info", {
                site: 1
            });
        }
    ]);
skhControllers.controller("noticeDetailCtrl", ['$scope', '$http', '$stateParams',
        function($scope, $http, $stateParams) {
            $http({
                method: "GET",
                url: basePath + "/notice/get.do",
                params: {
                    id: $stateParams.id
                }
            }).success(function(data) {
                $scope.notice = data;
            })
        }
    ]);
skhControllers.controller('noticeListCtrl', ['$scope', '$http',
        function($scope, $http) {
            $scope.currentPage = 0;
            $scope.pageSize = 10;
            $scope.load = function(goPage, limit) {
                if (goPage > $scope.numberOfPages || $scope.currentPage == goPage || goPage < 1 || $scope.busy) {
                    return;
                } else {
                    $scope.busy = true;
                    $http({
                        method: "GET",
                        url: basePath + '/notice/list.do',
                        params: {
                            offset: $scope.pageSize * (goPage - 1),
                            limit: $scope.pageSize,
                            openid: sessionStorage.getItem("openid")
                        }
                    }).success(function(data) {
                        $scope.numberOfPages = Math.ceil(data.count / $scope.pageSize);
                        $scope.currentPage = goPage;
                        $scope.busy = false;
                        $scope.notices = data.items;
                    });
                }
            }
            $scope.load(1, $scope.pageSize);
        }
    ]);
skhControllers.controller('billCtrl', ['$scope', '$http', '$stateParams', '$rootScope', '$state',
        function($scope, $http, $stateParams, $rootScope, $state) {
            //显示当前页面的业主信息
            $scope.ownerName = $stateParams.username;
            $scope.block = $stateParams.block;
            $scope.unit = $stateParams.unit;
            $scope.room = $stateParams.room;
            $scope.id = $stateParams.id;
            console.log($stateParams.id)
                //获取水电费等数据
            $http({
                method: "GET",
                url: basePath + "/payment/getAmount.do",
                params: {
                    paymentState: 0,
                    id: $stateParams.id
                }
            }).success(function(data) {
                if (data != "") {
                    $scope.freeShow = false;
                    var list = data.amountList;
                    var ret = {};
                    ret.datas = new Array();

                    for (var i = 0; i < list.length; i++) {
                        var yearmonth = list[i].year + "年" + list[i].month + "月";
                        var ele = {};
                        ele.id = list[i].id;
                        ele.type = list[i].paymentType;
                        ele.amount = list[i].amount;
                        if (ret.datas.length > 0) {
                            for (var j = 0; j < ret.datas.length; j++) {
                                if (ret.datas[j].yearmonth == yearmonth) {
                                    ret.datas[j].eles.push(ele);
                                    break;
                                }
                            }

                            if (j == ret.datas.length) {
                                var data = {};
                                data.yearmonth = yearmonth;
                                data.eles = new Array();
                                data.eles.push(ele);
                                ret.datas.push(data);
                            }

                        } else {
                            var data = {};
                            data.yearmonth = yearmonth;
                            data.eles = new Array();
                            data.eles.push(ele);
                            ret.datas.push(data);
                        }
                    }

                    $scope.payments = ret.datas;
                    $scope.selectAll = function() {}
                    $scope.selected = [];
                    $scope.total = 0;

                    //按钮单点
                    $scope.update = function(ele) {
                        if (ele.selected) {
                            if ($scope.selected.indexOf(ele.id) == -1) {
                                $scope.selected.push(ele.id);
                                $scope.total += ele.amount;
                            }
                        } else {
                            if ($scope.selected.indexOf(ele.id) != -1) {
                                var idx = $scope.selected.indexOf(ele.id);
                                $scope.selected.splice(idx, 1);
                                $scope.total -= ele.amount;
                            }
                        }

                        var wf = 0;
                        var ef = 0;
                        var wmonth = [];
                        var emonth = [];
                        var v2 = $scope.selected;

                        var v3 = list;
                        for (var i = 0; i < v3.length; i++) {
                            for (var j = 0; j < v2.length; j++) {
                                if (v3[i].id == (v2[j])) {
                                    if (v3[i].paymentType == 0) {
                                        wf += v3[i].amount;
                                        wmonth.push(v3[i].month)
                                    } else {
                                        ef += v3[i].amount;
                                        emonth.push(v3[i].month)
                                    }
                                };
                            }
                        }
                        $rootScope.waterFree = wf;
                        $rootScope.eleFree = ef;
                        $rootScope.wmonth = wmonth;
                        $rootScope.emonth = emonth;
                    }

                    $scope.updateYearmonth = function(yearmonth, selected) {
                        for (var i = 0; i < $scope.payments.length; i++) {
                            if ($scope.payments[i].yearmonth == yearmonth) {
                                for (var j = 0; j < $scope.payments[i].eles.length; j++) {
                                    var ele = $scope.payments[i].eles[j];
                                    if (selected) {
                                        if ($scope.selected.indexOf(ele.id) == -1) {
                                            $scope.selected.push(ele.id);
                                            $scope.total += ele.amount;
                                            ele.selected = true;
                                        }
                                    } else {
                                        if ($scope.selected.indexOf(ele.id) != -1) {
                                            var idx = $scope.selected.indexOf(ele.id);
                                            $scope.selected.splice(idx, 1);
                                            $scope.total -= ele.amount;
                                            ele.selected = false;
                                        }
                                    }
                                }
                                break;
                            }
                        }

                        var wf = 0;
                        var ef = 0;
                        var v2 = $scope.selected;

                        var wmonth = [];
                        var emonth = [];

                        var v3 = list;
                        for (var i = 0; i < v3.length; i++) {
                            for (var j = 0; j < v2.length; j++) {
                                if (v3[i].id == (v2[j])) {
                                    if (v3[i].paymentType == 0) {
                                        wf += v3[i].amount;
                                        wmonth.push(v3[i].month)
                                    } else {
                                        ef += v3[i].amount;
                                        emonth.push(v3[i].month)
                                    }
                                };
                            }
                        }
                        $rootScope.waterFree = wf;
                        $rootScope.eleFree = ef;
                        $rootScope.wmonth = wmonth;
                        $rootScope.emonth = emonth;
                    }

                    $scope.updateAll = function(sel) {
                        angular.forEach($scope.payments, function(payment) {
                            payment.selected = sel;
                            angular.forEach(payment.eles, function(ele) {
                                if (sel) {
                                    if ($scope.selected.indexOf(ele.id) == -1) {
                                        $scope.selected.push(ele.id);
                                        $scope.total += ele.amount;
                                        ele.selected = true;
                                    }
                                } else {
                                    if ($scope.selected.indexOf(ele.id) != -1) {
                                        var idx = $scope.selected.indexOf(ele.id);
                                        $scope.selected.splice(idx, 1);
                                        $scope.total -= ele.amount;
                                        ele.selected = false;
                                    }
                                }
                            })
                        })

                        var wf = 0;
                        var ef = 0;
                        var v2 = $scope.selected;
                        var wmonth = [];
                        var emonth = [];

                        var v3 = list;
                        for (var i = 0; i < v3.length; i++) {
                            for (var j = 0; j < v2.length; j++) {
                                if (v3[i].id == (v2[j])) {
                                    if (v3[i].paymentType == 0) {
                                        wf += v3[i].amount;
                                        wmonth.push(v3[i].month)
                                    } else {
                                        ef += v3[i].amount;
                                        emonth.push(v3[i].month)
                                    }
                                };
                            }
                        }
                        $rootScope.waterFree = wf;
                        $rootScope.eleFree = ef;
                        $rootScope.wmonth = wmonth;
                        $rootScope.emonth = emonth;
                    }
                }
            }).error(function(data) {
                console.log("数据")
            });
        }
    ]);
skhControllers.controller('paymentListCtrl', ['$scope', '$http', '$stateParams', '$rootScope', '$state',
        function($scope, $http, $stateParams, $rootScope, $state) {
            //console.log("成功加载record.html")
            //$scope.id=$stateParams.
            //console.log($stateParams.id);
            //$http({
            //    method: "GET",
            //    url: basePath + "/payment/getAmount.do",
            //    params: {
            //        paymentState: 1,
            //        id: $stateParams.id
            //    }
            //}).success(function (data) {
            //    $scope.records=data;
            //});
            //这里是写好的数据
            $scope.records = {
                    "amountList": [{
                        "id": 4,
                        "year": "2015",
                        "month": 12,
                        "amount": 35.99,
                        "paymentType": "1",
                        "number": "3456°-1246°",
                        "count": "-2210°"
                    }, {
                        "id": 5,
                        "year": "2015",
                        "month": 11,
                        "amount": 4.11,
                        "paymentType": "0",
                        "number": "0m³-3456m³",
                        "count": "3456m³"
                    }],
                    "amountSum": "444.00"
                }
                //console.log($scope.records);console.log($scope.records.amountList[0].amount)
        }
    ]);
skhControllers.controller('paymentCtrl', ['$scope', '$http', '$stateParams', '$rootScope', '$state',
        function($scope, $http, $stateParams, $rootScope, $state) {

            $scope.watmonth_f = $rootScope.wmonth;
            $scope.watmonth = $scope.watmonth_f.join(",");
            $scope.elmonth_f = $rootScope.emonth;
            $scope.elmonth = $scope.elmonth_f.join(",");

            $scope.block = $rootScope.block;
            $scope.unit = $rootScope.unit;
            $scope.room = $rootScope.room;

            $scope.waterFr = $rootScope.waterFree;
            $scope.eleFr = $rootScope.eleFree;

            $scope.totalFee = $rootScope.waterFree + $rootScope.eleFree;

            $scope.money_payment = function() {
                console.log("支付功能开始");
                $http({
                        method: "GET",
                        url: basePath + '/payment/webchatPay',
                        params: {
                            total_fee: $scope.totalFee,
                            openid: sessionStorage.getItem("openid")
                        }
                    }).error(function(response, status, headers, config) {
                        self.error = "连接错误!";
                    })
                    .then(function(response) {
                        if (response.data.return_code == "FAIL") {
                            self.error = response.data.return_msg;
                            return $q.reject();
                        }
                        return $q.resolve({
                            appid: response.data.appid,
                            prepay_id: response.data.prepay_id,
                            timestamp: response.data.timestamp,
                            nonceStr: response.data.nonceStr,
                            paySign: response.data.sign,
                            timestamp: response.data.timestamp
                        });
                    })
                    .then(function(data) {
                        var deferred = $q.defer();
                        wx.config({
                            debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
                            appId: data.appid, // 必填，公众号的唯一标识
                            timestamp: sessionStorage.getItem("timestamp"), // 必填，生成签名的时间戳
                            nonceStr: sessionStorage.getItem("noncestr"), // 必填，生成签名的随机串
                            signature: sessionStorage.getItem("sign"), // 必填，签名，见附录1
                            jsApiList: ['chooseWXPay'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2
                        });
                        wx.chooseWXPay({
                            timestamp: data.timestamp, // 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符
                            nonceStr: data.nonceStr, // 支付签名随机串，不长于 32 位
                            package: data.prepay_id, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=***）
                            signType: 'MD5', // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'
                            paySign: data.paySign, // 支付签名
                            success: function(res) {
                                // 支付成功后的回调函数
                                console.log('successfully paid', res);
                                deferred.resolve('success');
                            }
                        });
                        return deferred.promise;
                    })
                    .then(function() {
                        // call $state to confirm page
                        $state.go('success');
                        return $q.resolve(true);
                    });

            }

        }
    ]);
skhControllers.controller('repairAddCtrl', ['$scope', '$http', '$timeout', '$state', 'repairs', 'curd',
    function($scope, $http, $timeout, $state, repairs, curd) {
        $scope.mask_close = function() {
            $scope.suc_show = false;
        }
        $scope.mask_err_close = function() {
            $scope.err_show = false;
        }
        $scope.submitForm = function() {
            // params = {
            //     'device': $scope.device,
            //     'remark': $scope.remark,
            //     'mobile': $scope.mobile,
            //     'unit': $scope.unit,
            //     'room': $scope.room,
            //     'block': $scope.block,
            //     'openid': sessionStorage.getItem("openid")
            // }
            params = $scope.repair;

            curd.save(repairs, params).$promise.then(successcb, errcb);
        }

        function successcb() {
            $scope.suc_show = true;
            $timeout(function() {
                $scope.suc_show = false;
                $state.go("repair");
            }, 3000);
        }

        function errcb() {
            $scope.err_show = true;
            $timeout(function() {
                $scope.err_show = false;
            }, 3000);
        }
    }
]);

skhControllers.controller('repairDetailCtrl', ['$scope', '$http', '$state', '$stateParams', '$timeout', 'repairs', 'curd',
    function($scope, $http, $state, $stateParams, $timeout, repairs, curd) {
        $scope.suc_show = false;
        $scope.err_show = false;

        params = {
            'id': $stateParams.id
        };

        curd.get(repairs, params).$promise.then(function(data) {
            $scope.repair = data;
        })

        $scope.confirm = function(id) {
            params = {
                id: id,
                state: 3
            };

            curd.save(repairs, params).$promise.then(function(data) {
                $scope.repair = data;
                successcb();
            }, errcb)
        }

        function successcb() {
            $scope.suc_show = true;
            $timeout(function() {
                $scope.suc_show = false;
                $state.go("repair");
            }, 3000);
        }

        function errcb() {
            $scope.err_show = true;
            $timeout(function() {
                $scope.err_show = false;
            }, 3000);
        }
    }
]);

skhControllers.controller('repairListCtrl', ['$scope', '$http', '$timeout', '$state', 'repairs', 'curd',
    function($scope, $http, $timeout, $state, repairs, curd) {
        $scope.currentPage = 0;
        $scope.pageSize = 10;
        $scope.suc_show = false;
        $scope.err_show = false;
        $scope.repairs = [];
        var params = {};

        $scope.load = function(goPage, limit) {
            if (goPage > $scope.numberOfPages || $scope.currentPage == goPage || goPage < 1 || $scope.busy) {
                return;
            } else {
                params = {
                    offset: limit * (goPage - 1),
                    limit: limit,
                    openid: sessionStorage.getItem("openid"),
                    queryType: 'openid'
                };

                curd.query(repairs, params).$promise.then(function(data) {
                    $scope.numberOfPages = Math.ceil(data.count / $scope.pageSize);
                    $scope.currentPage = goPage;
                    $scope.busy = false;
                    Array.prototype.push.apply($scope.repairs, data.items);
                }, function(data) {
                    console.log("err!");
                });

                // repairStateful.query(params);

                // $scope.$watch("repairStateful.data", function(newVal, oldVal) {
                //     if (newVal != oldVal && newVal != null) {
                //         $scope.repairs = newVal.items;
                //     }
                // });
            }
        }

        $scope.confirm = function(id) {
            params = {
                id: id,
                state : 3
            };

            curd.save(repairs, params).$promise.then(function(data) {
                $scope.suc_show = true;
                $timeout(function() {
                    $scope.suc_show = false;
                    $state.go("repair", {}, {
                        reload: true
                    });
                }, 3000);
            }, function(data) {
                $scope.err_show = true;
                $timeout(function() {
                    $scope.err_show = false;
                }, 3000);
            })
        }

        $scope.load(1, $scope.pageSize);
    }
]);

skhControllers.controller('shopInfoCtrl', ['$scope', '$http', '$stateParams', '$rootScope', '$state',
        function($scope, $http, $stateParams, $rootScope, $state) {
            $rootScope.site = $stateParams.site;
            $scope.currentPage = 0;
            $scope.pageSize = 5;
            $scope.shops = [];

            $scope.load = function(goPage, limit) {
                if (goPage > $scope.numberOfPages || $scope.currentPage == goPage || goPage < 1 || $scope.busy) {
                    return;
                } else if ($rootScope.site != 3) {
                    $scope.busy = true;
                    $http({
                        method: "GET",
                        url: basePath + "/getBusiness.do",
                        params: {
                            offset: $scope.pageSize * (goPage - 1),
                            limit: limit == 8 ? limit : $scope.pageSize,
                            type: $stateParams.site - 1
                        }
                    }).success(function(data) {
                        $scope.numberOfPages = Math.ceil(data.count / $scope.pageSize);
                        $scope.currentPage = goPage;
                        $scope.busy = false;
                        $scope.shops.push.apply($scope.shops, data.items);
                    }).error(function(data) {
                        //console.log("server error!");
                    });
                }
            }

            $scope.load(1, 8);
        }
    ]);